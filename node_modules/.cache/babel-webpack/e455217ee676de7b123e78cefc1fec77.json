{"ast":null,"code":"import { BaseChartDirective } from 'ng2-charts';\nimport DataLabelsPlugin from 'chartjs-plugin-datalabels';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ng2-charts\";\nexport let ChartComponent = /*#__PURE__*/(() => {\n  class ChartComponent {\n    constructor() {\n      this.barChartOptions = {\n        responsive: true,\n        // We use these empty structures as placeholders for dynamic theming.\n        layout: {\n          padding: {\n            left: 50,\n            top: 50,\n            bottom: 50,\n            right: 50\n          }\n        },\n        scales: {\n          x: {},\n          y: {\n            min: 10\n          }\n        },\n        plugins: {\n          legend: {\n            position: 'top',\n            align: 'end',\n            display: true,\n            labels: {\n              usePointStyle: true\n            }\n          } // datalabels: {\n          //   anchor: 'start',\n          //   align: 'start',\n          // },\n\n        }\n      };\n      this.barChartType = 'bar';\n      this.barChartPlugins = [DataLabelsPlugin];\n      this.barChartData = {\n        labels: ['April', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct'],\n        datasets: [{\n          data: [65, 59, 80, 81, 56, 55, 40],\n          label: 'Recently Joined'\n        }, {\n          data: [28, 48, 40, 19, 86, 27, 90],\n          label: 'Expiring'\n        }, {\n          data: [28, 48, 40, 19, 86, 27, 90],\n          label: 'Inactive'\n        }]\n      };\n    }\n\n    ngOnInit() {} // events\n\n\n    chartClicked({\n      event,\n      active\n    }) {\n      console.log(event, active);\n    }\n\n    chartHovered({\n      event,\n      active\n    }) {\n      console.log(event, active);\n    }\n\n    randomize() {\n      var _a; // Only Change 3 values\n\n\n      this.barChartData.datasets[0].data = [Math.round(Math.random() * 100), 59, 80, Math.round(Math.random() * 100), 56, Math.round(Math.random() * 100), 40];\n      (_a = this.chart) === null || _a === void 0 ? void 0 : _a.update();\n    }\n\n  }\n\n  ChartComponent.ɵfac = function ChartComponent_Factory(t) {\n    return new (t || ChartComponent)();\n  };\n\n  ChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChartComponent,\n    selectors: [[\"app-chart\"]],\n    viewQuery: function ChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(BaseChartDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chart = _t.first);\n      }\n    },\n    decls: 4,\n    vars: 4,\n    consts: [[2, \"display\", \"block\"], [\"baseChart\", \"\", 3, \"data\", \"options\", \"plugins\", \"type\", \"chartHover\", \"chartClick\"]],\n    template: function ChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelementStart(1, \"div\");\n        i0.ɵɵelementStart(2, \"div\", 0);\n        i0.ɵɵelementStart(3, \"canvas\", 1);\n        i0.ɵɵlistener(\"chartHover\", function ChartComponent_Template_canvas_chartHover_3_listener($event) {\n          return ctx.chartHovered($event);\n        })(\"chartClick\", function ChartComponent_Template_canvas_chartClick_3_listener($event) {\n          return ctx.chartClicked($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"data\", ctx.barChartData)(\"options\", ctx.barChartOptions)(\"plugins\", ctx.barChartPlugins)(\"type\", ctx.barChartType);\n      }\n    },\n    directives: [i1.BaseChartDirective],\n    styles: [\"\"]\n  });\n  return ChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}